Mandelbrot formula :
Z0 = 0
Zn+1 = (Zn)**2 + C

C = x + yi

3 values of C :
C = -1 | C = 0 | C = +1

Define a set :
Value de base = 2
Si |Zn| < {value} => belongs to the set
Si |Zn| > {value} => does not belong to the set

""" Recursive function
#//? Recursive function are limited for +1000 itteration
def ComputeZ(itteration, complex):
    if(itteration == 0):
        return 0
    else:
        return pow(ComputeZ(itteration - 1, complex), 2) + complex
""" 

""" Test Function
def Compute_Z(complex, stop = 0):
    z = 0
    while stop == 0:
        yield z
        z = pow(z, 2) + complex

max = 5
for n, z_nbr in enumerate(Compute_Z(complex=1)):
    print(f"Z({n}) = {z_nbr}")
    if n >= max:
        break
"""

""" Mandelbrot Set with graphique
def DrawMandelbrot(startX: float, endX: float, startY: float, endY: float, step: float, max_iterations = 100):
    for x in np.arange(startX, endX+step, step):
        for y in np.arange(startY, endY+step, step):
            result = ComputesMandelbrot(x + y * 1j, max_iterations)
            if(result != max_iterations):
                point = plt.Circle((x, y), 0.015, color="white")
                ax.add_artist(point)
            else:
                point = plt.Circle((x, y), 0.015, color="black")
                ax.add_artist(point)

DrawMandelbrot(-2.0, 1.0, -1.0, 1.0, 0.01, 100)
"""